name: Test Suite

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Main test job - runs all tests together for efficiency
  test-all:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run all unit tests
      run: |
        python test_runner.py --module all --type unit --coverage --verbose
    
    - name: Run all integration tests
      run: |
        python test_runner.py --module all --type integration --verbose
    
    - name: Run linting
      run: |
        python test_runner.py --lint --verbose
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Individual module tests for detailed reporting
  test-modules:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        module: [loadcell, mpu, bmp]
        python-version: [3.11]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run ${{ matrix.module }} tests
      run: |
        python test_runner.py --module ${{ matrix.module }} --coverage --verbose
    
    - name: Upload ${{ matrix.module }} coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: ${{ matrix.module }}
        name: codecov-${{ matrix.module }}
        fail_ci_if_error: false

  # Comprehensive linting and code quality checks
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort mypy bandit safety
    
    - name: Run linting checks
      run: |
        python test_runner.py --lint --verbose
    
    - name: Run bandit (security linting)
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ -ll
    
    - name: Run safety (dependency vulnerability check)
      run: |
        safety check --json --output safety-report.json || true
        safety check

  # Hardware tests (only run on PRs and when hardware is available)
  test-hardware:
    runs-on: ubuntu-latest
    needs: test-all
    if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run hardware tests
      run: |
        python test_runner.py --hardware --verbose
      continue-on-error: true
      env:
        # Add any hardware-specific environment variables here
        HARDWARE_AVAILABLE: true

  # Performance and load testing (optional)
  test-performance:
    runs-on: ubuntu-latest
    needs: test-all
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark
    
    - name: Run performance tests
      run: |
        python test_runner.py --module all --type unit --benchmark --verbose
      continue-on-error: true
